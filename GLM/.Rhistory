install.packages("tidyverse")
install.packages(c("backports", "bayesplot", "BH", "broom", "cpp11", "crosstalk", "DBI", "diffobj", "dplyr", "DT", "fansi", "foreign", "future", "ggplot2", "ggridges", "git2r", "hms", "htmltools", "htmlwidgets", "httpuv", "infer", "jsonlite", "loo", "Matrix", "nlme", "parallelly", "pkgbuild", "pROC", "ps", "Rcpp", "RcppArmadillo", "RcppEigen", "rlang", "rmarkdown", "SQUAREM", "StanHeaders", "testthat", "tibble", "tinytex", "torch", "usethis", "vctrs", "withr", "xfun"))
library(tidyverse)
library(lme4)
library(lmerTest) # lmerTest will give you p values
babyrats <- readRDS("babyrats.rds")
library(tidyverse)
library(lme4)
library(lmerTest)
A <- c(62,60,63,59)
B <- c(63,67,71,64,65,66)
C <- c(68,66,71,67,68,68)
D <- c(56,62,60,61,63,64,63,59)
data1 <- tibble(group = c(rep("A", length(A)),
rep("B", length(B)),
rep("C", length(C)),
rep("D", length(D))),
obj_time = c(A,B,C,D))
glimpse(data1)
glimpse(data1)
mean(data1$obj_time) # data1 %>% summarize(mean(obj_time))
mean(A) # data1 %>% filter(group == "A") %>% summarize(mean(obj_time))
mean(B) # data1 %>% group_by(group) %>% summarize(mean(obj_time))
mean(C)
mean(D)
data1 <- data1 %>% mutate(grand_mean = mean(obj_time))
data1 <- data1 %>% group_by(group) %>% mutate(group_mean = mean(obj_time)) %>% ungroup()
data1
data1 <- data1 %>% mutate(group_effect = group_mean - grand_mean,
error = obj_time - group_mean)
data1
data1$grand_mean^2
# sums of squares ... add together
sum(data1$obj_time^2)
sum(data1$grand_mean^2)
sum(data1$group_effect^2)
sum(data1$error^2)
sum(data1$obj_time^2) == sum(data1$grand_mean^2) + sum(data1$group_effect^2) + sum(data1$error^2)
sum(data1$group_effect^2)/3
sum(data1$error^2)/20
x <- rf(100000, df1 = 3, df2 = 20)
hist(x,
breaks = 'Scott',
freq = FALSE,
xlim = c(0,10),
ylim = c(0,1), main = "F-distribution with 3,20 df",
xlab = '')
curve(df(x, df1 = 3, df2 = 20), from = 0, to = 11, n = 5000, col= 'pink', lwd=2, add = T)
glimpse(data1)
lm(obj_time ~ group, data = data1) %>% anova()
aov(obj_time ~ group, data = data1) %>% summary()
f_stat_1
pf(f_stat_1, df1 = 3, df2 = 20, lower.tail = FALSE)
(f_stat_1 <- (sum(data1$group_effect^2)/3)/(sum(data1$error^2)/20))
pf(f_stat_1, df1 = 3, df2 = 20, lower.tail = FALSE)
libary(reticulate)
lirbary(reticulate)
library(reticulate)
reticulate
reticulate::virtualenv_list()
repl_python()
library(tidyverse)
library(lme4)
library(lmerTest)
set.seed(123)
n<-8
set.seed(123)
n<-8
# simulate an appropriate multivariate data set: uses mvrnorm function from MASS package
mu_control = rep(0, 4)
mu_exp = rep(0.8, 4)
#creates an appropriately-sized correlation matrix based on the number of trials you've selected
matrix = c()
long_matrix = c()
for( rownumber in 1:4 )  {
row = rep(0.35, 4)
row[rownumber] = 1
long_matrix = c(long_matrix, row)
}
matrix = matrix(long_matrix, nrow = 4)
control_data = MASS::mvrnorm(n = n, mu = mu_control, Sigma = matrix, empirical = FALSE)
control_data = control_data %>% as.data.frame() %>% mutate(group = "control", subject_ID = 1:n)
exp_data = MASS::mvrnorm(n = n, mu = mu_exp, Sigma = matrix, empirical = TRUE)
exp_data = exp_data %>% as.data.frame() %>% mutate(group = "exp", subject_ID = 1+n:(n*2-1))
wide_data = rbind(control_data, exp_data)
end_column = paste("V", 4 %>% as.character(), sep = "")
long_data = wide_data %>% pivot_longer(cols = V1:end_column, names_to = "trial", names_prefix = "V")
long_data = long_data %>% mutate(trial = trial %>% as.ordered(), group = group %>% as.factor(), subject_ID = subject_ID %>% as.factor())
long_data <- long_data %>% mutate(value = value + 0.3*(as.numeric(trial)-1))
# add a trial effect
long_data %>% ggplot(aes(x=trial,y=value,color=group)) + geom_line(aes(group=subject_ID)) +
stat_summary(aes(group = group, color = group), fun = "mean", geom = "line", size = 3)
reticulate::repl_python()
setwd("~/Documents/timescales_analysis/GLM")
loadMAT('all_taus_and_frs.mat')
library(R.matlab)
install.packages("R.matlab")
library(R.matlab)
data <- loadMat('all_taus_and_frs.mat')
data <- readMat('all_taus_and_frs.mat')
View(data)
View(data)
data(1)
data(froot.acc.taus)
data[1]
data <- unlist(data)
data[1]
data[2]
data <- readMat('all_taus_and_frs.mat')
df <- as.data.frame(data.table::transpose(vdata))
df <- as.data.frame(data.table::transpose(data))
View(df)
df <- as.data.frame(data.table::transpose(data),col.names='tau')
